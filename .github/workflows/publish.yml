name: Publish Python Package

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Get current package version from pyproject.toml
        id: get_version
        run: echo "PACKAGE_VERSION=$(poetry version -s)" >> $GITHUB_ENV

      - name: Get latest version from PyPI
        id: get_pypi_version
        run: |
          PACKAGE_NAME=$(poetry version | awk '{print $1}')
          PYPI_VERSION=$(python -c "import requests; response = requests.get(f'https://pypi.org/pypi/{PACKAGE_NAME}/json'); print(response.json().get('info', {}).get('version', '0.0.0'))")
          echo "PYPI_VERSION=${PYPI_VERSION}" >> $GITHUB_ENV

      - name: Compare versions
        id: check_version
        run: |
          if [ "$(printf '%s\n' "$PACKAGE_VERSION" "$PYPI_VERSION" | sort -V | head -n1)" != "$PACKAGE_VERSION" ]; then
            echo "New version exists. Proceeding with publishing."
            echo "should_publish=true" >> $GITHUB_ENV
          else
            echo "No new version to publish."
            echo "should_publish=false" >> $GITHUB_ENV

      - name: Publish to PyPI
        if: env.should_publish == 'true'
        run: |
          poetry build
          poetry publish --username __token__ --password ${{ secrets.PYPI_TOKEN }}

      - name: Notify about no new version
        if: env.should_publish == 'false'
        run: echo "The package is up to date. No new version to publish."